<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江东大少爷</title>
  <icon>https://xuyang112358.github.io/icon.png</icon>
  <subtitle>From XPU To HDU</subtitle>
  <link href="https://xuyang112358.github.io/atom.xml" rel="self"/>
  
  <link href="https://xuyang112358.github.io/"/>
  <updated>2020-10-24T06:49:56.000Z</updated>
  <id>https://xuyang112358.github.io/</id>
  
  <author>
    <name>XuYang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解LSTM</title>
    <link href="https://xuyang112358.github.io/archives/33247.html"/>
    <id>https://xuyang112358.github.io/archives/33247.html</id>
    <published>2020-10-24T14:28:50.000Z</published>
    <updated>2020-10-24T06:49:56.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;LSTM 是 Long Short Term Memory Networks 的缩写，按字面翻译就是长的短时记忆网络。LSTM 的网络结构是 1997 年由 Hochreiter 和 Schmidhuber 提出的，随后这种网络结构变得非常流行。 LSTM虽然只解决了短期依赖的问题，并且它通过刻意的设计来避免长期依赖问题，这样的做法在实际应用中被证明还是十分有效的，有很多人跟进相关的工作解决了很多实际的问题，所以现在LSTM 仍然被广泛地使用。&lt;/p&gt;</summary>
    
    
    
    <category term="循环神经网络" scheme="https://xuyang112358.github.io/categories/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="自然语言处理" scheme="https://xuyang112358.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    <category term="深度学习" scheme="https://xuyang112358.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch常用函数汇总</title>
    <link href="https://xuyang112358.github.io/archives/45468.html"/>
    <id>https://xuyang112358.github.io/archives/45468.html</id>
    <published>2020-10-23T18:55:44.000Z</published>
    <updated>2020-10-24T06:12:28.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;nn-Linear&quot;&gt;&lt;a href=&quot;#nn-Linear&quot; class=&quot;headerlink&quot; title=&quot;nn.Linear&quot;&gt;&lt;/a&gt;nn.Linear&lt;/h1&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://xuyang112358.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pytorch" scheme="https://xuyang112358.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>BP神经网络</title>
    <link href="https://xuyang112358.github.io/archives/1231.html"/>
    <id>https://xuyang112358.github.io/archives/1231.html</id>
    <published>2020-10-21T20:00:53.000Z</published>
    <updated>2020-10-24T06:13:22.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;BP神经网络简介&quot;&gt;&lt;a href=&quot;#BP神经网络简介&quot; class=&quot;headerlink&quot; title=&quot;BP神经网络简介&quot;&gt;&lt;/a&gt;BP神经网络简介&lt;/h1&gt;&lt;h2 id=&quot;网络结构：&quot;&gt;&lt;a href=&quot;#网络结构：&quot; class=&quot;headerlink&quot; title=&quot;网络结构：&quot;&gt;&lt;/a&gt;网络结构：&lt;/h2&gt;&lt;p&gt;输入层、隐藏层（实际应用中可能不止一层）和输出层。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../images/BP神经网络/image-20201021195702755.png&quot; alt=&quot;image-20201021195702755&quot;&gt;&lt;/p&gt;
&lt;center&gt;BP神经网络架构图&lt;/center&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://xuyang112358.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="神经网络" scheme="https://xuyang112358.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>基于AIS的船舶轨迹分析的研究与应用</title>
    <link href="https://xuyang112358.github.io/archives/15340.html"/>
    <id>https://xuyang112358.github.io/archives/15340.html</id>
    <published>2020-10-20T17:03:59.000Z</published>
    <updated>2020-10-24T06:32:54.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;创新点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;深入探讨了基于 BP 神经网络的船舶轨迹预测模型，通过 AIS 数据提供的信息，针对船舶轨迹预测问题，结合遗传算法，改进了 BP 神经网络轨迹预测模型，并且对不同参数对该模型预测精确度和效率的影响做了研究。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将船舶特有的轨迹特征与时间序列相结合，提出基于深度学习的RNN-LSTM 模型，分析参数并与 GA-BP 神经网络对比，分析出在海上智能交通轨迹预测的方面，基于时间序列的 LSTM 模型的预测能力更强。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用训练好的模型，提出船舶轨迹预测模型在海上智能交通的应用方面，对目标海域的船舶监控以及异常检测，航路规划等方面。 &lt;/p&gt;</summary>
    
    
    
    <category term="舟山海洋项目" scheme="https://xuyang112358.github.io/categories/%E8%88%9F%E5%B1%B1%E6%B5%B7%E6%B4%8B%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="BP神经网络" scheme="https://xuyang112358.github.io/tags/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="遗传算法" scheme="https://xuyang112358.github.io/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    <category term="LSTM" scheme="https://xuyang112358.github.io/tags/LSTM/"/>
    
  </entry>
  
  <entry>
    <title>序列模型中的注意力机制</title>
    <link href="https://xuyang112358.github.io/archives/28087.html"/>
    <id>https://xuyang112358.github.io/archives/28087.html</id>
    <published>2020-10-20T09:34:56.000Z</published>
    <updated>2020-10-24T07:07:22.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;现在很多研究的NLP（自然语言处理）问题都可以转换成一个Sequence to Sequence模型来解决，比如说机器翻译，智能问答，语音识别等。&lt;/p&gt;
&lt;p&gt;Sequence to Sequence是一个Encoder–Decoder 结构的网络，由一个encoder和一个decoder组成，encoder完成编码工作，将不同的输入编码成一个定长的向量，decoder则完成解码工作，对编码器的结果进行解码输出，例如在中英文翻译中，首先编码器将中文编码成一个向量表示，接着解码器把该向量解码成一个英文表示 ，完成翻译过程。&lt;/p&gt;</summary>
    
    
    
    <category term="循环神经网络" scheme="https://xuyang112358.github.io/categories/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="自然语言处理" scheme="https://xuyang112358.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    <category term="深度学习" scheme="https://xuyang112358.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>地波雷达与自动识别系统（AIS）目标点迹最优关联算法</title>
    <link href="https://xuyang112358.github.io/archives/2904.html"/>
    <id>https://xuyang112358.github.io/archives/2904.html</id>
    <published>2020-10-19T08:44:09.000Z</published>
    <updated>2020-10-20T09:06:36.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;问题简介&quot;&gt;&lt;a href=&quot;#问题简介&quot; class=&quot;headerlink&quot; title=&quot;问题简介&quot;&gt;&lt;/a&gt;问题简介&lt;/h1&gt;&lt;h2 id=&quot;进出港非法渔船研判&quot;&gt;&lt;a href=&quot;#进出港非法渔船研判&quot; class=&quot;headerlink&quot; title=&quot;进出港非法渔船研判&quot;&gt;&lt;/a&gt;进出港非法渔船研判&lt;/h2&gt;&lt;p&gt;研判三要素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;船舶进出港登记人员是否在册（查数据库）√&lt;/li&gt;
&lt;li&gt;视频设备获取的船舶id是否在册（查数据库）√&lt;/li&gt;
&lt;li&gt;雷达扫描到的船舶是否有与之匹配的AIS点位（点迹匹配）？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;研判港口渔船的合法性有以上三个要素，其中前两个可以通过简单的数据库查询做出判断，但是第三点由于AIS数据和雷达数据间的弱关联性，需要做进一步处理。&lt;/p&gt;</summary>
    
    
    
    <category term="舟山海洋项目" scheme="https://xuyang112358.github.io/categories/%E8%88%9F%E5%B1%B1%E6%B5%B7%E6%B4%8B%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="数据融合" scheme="https://xuyang112358.github.io/tags/%E6%95%B0%E6%8D%AE%E8%9E%8D%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>A-robust-Delaunay-AFT-based-parallel-method-for-the-generation-of-large-scale-fully-constrained-meshes</title>
    <link href="https://xuyang112358.github.io/archives/28714.html"/>
    <id>https://xuyang112358.github.io/archives/28714.html</id>
    <published>2020-10-18T19:20:25.000Z</published>
    <updated>2020-10-19T01:46:52.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Fei Yu,Yan Zeng,Z.Q. Guan,S.H. Lo. A robust Delaunay-AFT based parallel method for the generation of large-scale fully constrained meshes[J]. Computers and Structures,2020,228.&lt;/p&gt;
&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;本文研究者充分利用串行Delaunay-AFT网格生成器，&lt;u&gt;开发了一种在分布式存储的机器上生成大规模四面体网格的并行方法&lt;/u&gt;。 &lt;/p&gt;
&lt;p&gt;为了生成具有所需和保留属性的网格，&lt;u&gt;使用了一种基于Delaunay-AFT的域分解(DD)技术&lt;/u&gt;。从覆盖问题域的Delaunay三角剖分(DT)开始，该技术创建了一层元素，将整个域划分为几个区域。将最初粗糙的网格域划分为了可以进行并行网格划分的子域的DTs。 当一个子域的大小小于用户指定的阈值，将用标准Delaunay-AFT方法进行网格划分。     &lt;/p&gt;
&lt;p&gt;&lt;u&gt;设计了两级DD策略来提高了该算法的并行效率&lt;/u&gt;。&lt;u&gt;还使用消息传递接口(MPI)实现了动态负载均衡方案&lt;/u&gt;。 &lt;u&gt;引入了核心外网格划分，以适应过大的网格&lt;/u&gt;，而这些网格不能由计算机的可用存储器(RAM)处理。 &lt;u&gt;对具有数千个表面贴片的各种复杂几何形状进行了数值试验，创建了拥有超过100亿个四面体元素的超大尺度网格&lt;/u&gt;。 此外，不同DD操作次数生成的网格在质量上几乎相同：显示了自动分解算法的一致性和稳定性。&lt;/p&gt;</summary>
    
    
    
    <category term="并行与分布式计算" scheme="https://xuyang112358.github.io/categories/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="并行与分布式计算" scheme="https://xuyang112358.github.io/tags/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
    <category term="网格划分" scheme="https://xuyang112358.github.io/tags/%E7%BD%91%E6%A0%BC%E5%88%92%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>基于GPU的矩阵计算并行加速方法研究</title>
    <link href="https://xuyang112358.github.io/archives/9502.html"/>
    <id>https://xuyang112358.github.io/archives/9502.html</id>
    <published>2020-10-16T16:42:45.000Z</published>
    <updated>2020-10-19T01:44:40.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;李丰.&lt;em&gt;基于GPU的矩阵计算并行加速方法研究&lt;/em&gt;.2018.哈尔滨工业大学,PhD</summary>
        
      
    
    
    
    <category term="并行与分布式计算" scheme="https://xuyang112358.github.io/categories/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="并行与分布式计算" scheme="https://xuyang112358.github.io/tags/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>PAC2020:傅里叶空间图像相似度计算</title>
    <link href="https://xuyang112358.github.io/archives/62775.html"/>
    <id>https://xuyang112358.github.io/archives/62775.html</id>
    <published>2020-10-14T19:52:33.000Z</published>
    <updated>2020-10-19T01:44:56.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;赛题描述&quot;&gt;&lt;a href=&quot;#赛题描述&quot; class=&quot;headerlink&quot; title=&quot;赛题描述&quot;&gt;&lt;/a&gt;赛题描述&lt;/h1&gt;&lt;p&gt;在蛋白质冷冻电镜三维重构程序中，将二维真实图像与空间中的三维结构的投影图像的相似度计算是调用最为频繁的计算，相似度计算的原理是求取真实图像与投影图像的所有像素在傅里叶空间中的二范数之和，公式如下：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
diff=\sum_{i=1}^{N}{a*||image_i-proj_i||}&lt;/script&gt;&lt;p&gt;&lt;img src=&quot;../../../images/PAC2020-傅里叶空间图像相似度计算/image-20201015095633405.png&quot; alt=&quot;image-20201015095633405&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;比赛的目的是将赛方提供的相似度计算程序进行并行加速，输出结果精度误差不超过十万分之一，比赛的代码包里提供了校验文件。&lt;/p&gt;</summary>
    
    
    
    <category term="并行与分布式计算" scheme="https://xuyang112358.github.io/categories/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="并行与分布式计算" scheme="https://xuyang112358.github.io/tags/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
    <category term="计算机类竞赛" scheme="https://xuyang112358.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
</feed>
